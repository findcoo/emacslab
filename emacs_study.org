* Emacs tutorial
** Graphviz
*** dot 문법
기본적으로 json형식 같이 key value 형식과 유사하며 키에 분포적인 정의가 가미된 형태다.
[]안의 요소는 선택적인 옵션을 ()안의 요소는 필요로 되는 요소들의 묶음. | 는 대체할 수 있는 요소를 표현.

1. Simple Diagraph
  #+BEGIN_SRC dot :file images/example1.svg :exports none
/* 
graph: (graph | diagraph) [ID] 그래프의 형식을 선언하며 ID를 정의할 수 있다.
{}: 그래프를 구성하는 요소들을 정의하는 부분 
*/
  graph { 
    a -- b;
  }
  #+END_SRC

  #+RESULTS:
  [[file:images/example1.svg]]


*** 예제 받아 출력
  #+name: dot-eg-table
  | a | Hello |
  | b | World |

  위의 테이블을 다이어그램으로 변환한다.

  #+name: make-dot
  #+BEGIN_SRC emacs-lisp :var table=dot-eg-table :results output
    (mapcar `(lambda (x)
              (princ (format "%s [label =\"%s\", shape = \"box\"\];\n" 
                            (first x) (second x)))) table)
              (princ (format "%s -- %s;\n" 
                            (first (first table)) (first (second table))))
  #+END_SRC

  테이블을 graphviz 형식으로 변경하는 코드

  #+RESULTS: make-dot
  : a [label ="Hello", shape = "box"];
  : b [label ="World", shape = "box"];
  : a -- b

  변형의 결과값

  #+BEGIN_SRC dot :file images/test-dot.svg :var input=make-dot 
    graph {
      $input
    }
  #+END_SRC

  입력 받은 형식을 통해 다이어그램 이미지를 생성한다.

  #+RESULTS:
  [[file:images/test-dot.png]]

  다이어그램 변환 결과

3. dot 구문을 이용한 출력
  #+BEGIN_SRC dot :file images/test-dot2.svg
  digraph G {
    my_start -> one_branch;
    my_start -> another_branch;
  }
  #+END_SRC

  #+RESULTS:
  [[file:images/test-dot2.png]]
