#+TITLE Emacs Lab

* Emacs tutorial
:PROPERTIES:
:EXPORT_TITLE: ETC
:END:
** Graphviz
*** dot 문법
기본적으로 json형식 같이 key value 형식과 유사하며 키에 분포적인 정의가 가미된 형태다.
[]안의 요소는 선택적인 옵션을 ()안의 요소는 필요로 되는 요소들의 묶음. | 는 대체할 수 있는 요소를 표현.

1. Simple Diagraph
  #+BEGIN_SRC dot :file images/example1.svg :exports none
/* 
graph: (graph | diagraph) [ID] 그래프의 형식을 선언하며 ID를 정의할 수 있다.
{}: 그래프를 구성하는 요소들을 정의하는 부분 
*/
  graph { 
    a -- b;
  }
  #+END_SRC

  #+RESULTS:
  [[file:images/example1.svg]]


*** 예제 받아 출력
  #+name: dot-eg-table
  | a | Hello |
  | b | World |

  위의 테이블을 다이어그램으로 변환한다.

  #+name: make-dot
  #+BEGIN_SRC emacs-lisp :var table=dot-eg-table :results output
    (mapcar `(lambda (x)
              (princ (format "%s [label =\"%s\", shape = \"box\"\];\n" 
                            (first x) (second x)))) table)
              (princ (format "%s -- %s;\n" 
                            (first (first table)) (first (second table))))
  #+END_SRC

  테이블을 graphviz 형식으로 변경하는 코드

  #+RESULTS: make-dot
  : a [label ="Hello", shape = "box"];
  : b [label ="World", shape = "box"];
  : a -- b

  변형의 결과값

  #+BEGIN_SRC dot :file images/test-dot.svg :var input=make-dot 
    graph {
      $input
    }
  #+END_SRC

  입력 받은 형식을 통해 다이어그램 이미지를 생성한다.

  #+RESULTS:
  [[file:images/test-dot.png]]

  다이어그램 변환 결과

3. dot 구문을 이용한 출력
  #+BEGIN_SRC dot :file images/test-dot2.svg
  digraph G {
    my_start -> one_branch;
    my_start -> another_branch;
  }
  #+END_SRC

  #+RESULTS:
  [[file:images/test-dot2.png]]
* Lisp 
:PROPERTIES:
:EXPORT_TITLE: Lisp
:END:
  lisp을 배움으로 다양한 작업들을 자동화 할 수 있다. 일반적으로 vim을 사용할 때는 배쉬 쉘을 사용하듯
  emacs를 사용할 때에는 elips을 사용하여 작업을 수행한다. 두번째로 오래된 고수준 언어답게 언어의 완성도가 높으며
  다양하고 편리한 함수들이 이미 많이 구축되있다.
** 구조
lisp의 표현법은 symbolic expressions(s-expressions)로 불린다.
s-epxressions는 objects, atoms, lists 세 가지 요소로 구성되는 표현법이다.
#+BEGIN_SRC elisp
  (+ 7 9 11)
#+END_SRC

#+RESULTS:
: 27
위 예제는 세 숫자를 모두 더하는 예제다.
더하기 기호는 더하는 함수를 그 뒤에 세 숫자는 매개변수임을 알 수 있다.
#+BEGIN_SRC elisp
  (+ (* (/ 9 5) 60) 32)
#+END_SRC

#+RESULTS:
: 92
위 예제의 수식은 일반적인 중위 표현 방식으로는 (60 * 9 / 5) + 32 다.
이를 전위 표현으로 바꾸면 + * / 9 5 60 32 가 된다. lisp의 표현방식은 전위 표현 방식임을 알 수 있다.
문맥을 좀 더 알아보기 위해 위에 언급한 세가지 문법범주를 알아보자.
- atom ( 문자열 )
- list ( 괄호열로 구분된 atom들의 집합체 )
- string ( 큰 따옴표로 구분된 문자열 )
#+BEGIN_SRC elisp :results output
  (princ "string 출력\n")
  (princ (format "atom %d 출력" 1))
#+END_SRC

#+RESULTS:
: string 출력
: atom 1 출력

*** 프로그래밍 언어적 특징들
- 산술 연산자는 +, -, *, /
- 함수 f(x)는 (f x)로 표현된다.
- 표현식에서 대문자 소문자는 동일 취급한다.
- 상수적 혹은 primary 타입같은 요소는 오직 세가지 존재하며 숫자, t, nil이다.(t = true, nil = false)

*** Naming Convention
- white-space, (), ", ', `, ;, :, | 를 제외한 모든 문자를 함수명으로 사용할 수 있다.
- `는 코드 이스케이프 역할을 수행하며 `뒤에 list는 atom으로 해석된다.
#+BEGIN_SRC elisp :results output
(princ (+ 3 3))
(princ "\n")
(princ `(+ 3 3))
#+END_SRC

#+RESULTS:
: 6
: (+ 3 3)
** 자료형
lisp의 변수는 동적인 자료형을 따름으로 대부분은 객체로 표현된다. 하지만 객체화된 자료도 범주를 갖고있다.
- Scala types - number, character, symbol
- Data structures - list, vector, bit-vector, string
자료형을 확인하는 함수로 ~typep~와 ~type-of~가 있다.
#+BEGIN_SRC elisp :results output
(prin1 (typep 10 `integer))
(print (typep t `integer))
(prin1 (typep t t))
(print (typep nil t))
(prin1 (typep nil nil))
(print (type-of nil))
(prin1 (type-of t))
(print (type-of 12))
#+END_SRC

#+RESULTS:
: t
: nil
: t
: t
: nil
: symbol
: symbol
: integer
typep 함수는 변수의 자료형을 확인하여 일치시 t 일치하지 않으면 nil을 반환하고 type-of는 어떤 자료형인지를 반환한다.
위에서 주의할 것이 있는데 nil의 자료형이다. t일 경우 t를 반환하지만 nil일 경우 nil을 반환하다.

*** 자료형 표
| array             | fixnum     | package           | simple-string |
|-------------------+------------+-------------------+---------------|
| atom              | float      | pathname          | simple-vector |
| bignum            | function   | random-state      | single-float  |
| bit               | hash-table | ratio             | standard-char |
| bit-vector        | integer    | rational          | stream        |
| character         | keyword    | readtable         | string        |
| [common]          | list       | sequence          | [string-char] |
| compiled-function | long-float | short-float       | symbol        |
| complex           | nill       | signed-byte       | t             |
| cons              | null       | simple-array      | unsigned-byte |
| double-float      | number     | simple-bit-vector | vector        |

** Macro 
매크로를 통해 lisp의 문법을 변경할 수 있다.
#+BEGIN_SRC elisp
(defmacro setTo10(num)
(setq num 10)(print num))
(setTo10 25)
#+END_SRC

#+RESULTS:
: 10

** 변수
lisp에서는 변수를 심볼로 표현한다.

전역변수의 선언 방식
#+BEGIN_SRC elisp
(defvar x 234)
(print x)
#+END_SRC

#+RESULTS:
: 234

#+BEGIN_SRC elisp
(setq x 10)
(print x)
#+END_SRC

#+RESULTS:
: 10

지역변수의 선언방식
#+BEGIN_SRC elisp :results output
(let ((x `a) (y `b)) (prin1 (format "%s %s" x y)))
#+END_SRC

#+RESULTS:
: "a b"

상수의 선언 방식
#+BEGIN_SRC elisp :results output
(defconst PI 3.141592)
(prin1 PI)
#+END_SRC

#+RESULTS:
: 3.141592

** 연산자 
*** 산술 연산자
| Operator | Description                                                                  | Example                 |
|----------+------------------------------------------------------------------------------+-------------------------|
| +        | Adds two operands                                                            | (+A B) will give 30     |
| -        | Subtracts second operand from the first                                      | (- A B) will give -10   |
| *        | Multiplies both operands                                                     | (* A B) will give 200   |
| /        | Divides numerator by de-numerator                                            | (/ B A) will give 2     |
| mod,rem  | Modulus Operator and remainder of after an integer division                  | (mod B A )will give 0   |
| incf     | Increments operator increases integer value by the second argument specified | (incf A 3) will give 13 |
| decf     | Decrements operator decreases integer value by the second argument specified | (decf A 4) will give 9  |
*** 비교 연산자
| Operator | Description                                                                                                                              | Example               |
|----------+------------------------------------------------------------------------------------------------------------------------------------------+-----------------------|
| =        | Checks if the values of the operands are all equal or not, if yes then condition becomes true.                                           | (= A B) is not true.  |
| /=       | Checks if the values of the operands are all different or not, if values are not equal then condition becomes true.                      | (/= A B) is true.     |
| >        | Checks if the values of the operands are monotonically decreasing.                                                                       | (> A B) is not true.  |
| <        | Checks if the values of the operands are monotonically increasing.                                                                       | (< A B) is true.      |
| >=       | Checks if the value of any left operand is greater than or equal to the value of next right operand, if yes then condition becomes true. | (>= A B) is not true. |
| <=       | Checks if the value of any left operand is less than or equal to the value of its right operand, if yes then condition becomes true.     | (<= A B) is true.     |
| max      | It compares two or more arguments and returns the maximum value.                                                                         | (max A B) returns 20  |
| min      | It compares two or more arguments and returns the minimum value.                                                                         | (min A B) returns 10  |
*** 논리연산자
| Operator | Description                                                                                                                                                                                    | Example                    |
|----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------|
| and      | It takes any number of arguments. The arguments are evaluated left to right. If all arguments evaluate to non-nil, then the value of the last argument is returned. Otherwise nil is returned. | (and A B) will return NIL. |
| or       | It takes any number of arguments. The arguments are evaluated left to right until one evaluates to non-nil, in such case the argument value is returned, otherwise it returns nil.             | (or A B) will return 5.    |
| not      | It takes one argument and returns t if the argument evaluates to nil.                                                                                                                          | (not A) will return T.     |
|          |                                                                                                                                                                                                |                            |
*** 이진 연산자
| Operator | Description                                                                                                                                                                            | Example                     |
|----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------|
| logand   | This returns the bit-wise logical AND of its arguments. If no argument is given, then the result is -1, which is an identity for this operation.                                       | (logand a b)) will give 12  |
| logior   | This returns the bit-wise logical INCLUSIVE OR of its arguments. If no argument is given, then the result is zero, which is an identity for this operation.                            | (logior a b) will give 61   |
| logxor   | This returns the bit-wise logical EXCLUSIVE OR of its arguments. If no argument is given, then the result is zero, which is an identity for this operation.                            | (logxor a b) will give 49   |
| lognor   | This returns the bit-wise NOT of its arguments. If no argument is given, then the result is -1, which is an identity for this operation.                                               | (lognor a b) will give -62, |
| logeqv   | This returns the bit-wise logical EQUIVALENCE (also known as exclusive nor) of its arguments. If no argument is given, then the result is -1, which is an identity for this operation. | (logeqv a b) will give -50  |
** 조건문
*** cond
#+BEGIN_SRC elisp :results output
(setq a 10)
(cond 
((> a 20) (prin1 "smaller"))
((< a 20) (prin1 "bigger")))
#+END_SRC

#+RESULTS:
: "bigger"
조건들에 따라 시행되는 form의 연속
*** if
#+BEGIN_SRC elisp :results output
(setq a 10)
(if (> a 20) (print "bigger") (print "smaller"))
#+END_SRC

#+RESULTS:
: 
: "smaller"
첫번째 boolean값에 참이면 두 번째 변수를 거짓이면 세번째 변수를 실행한다.
*** when 
#+BEGIN_SRC elisp :results output
(setq a 100)
(when (> a 20) (print "bigger"))
#+END_SRC

#+RESULTS:
: 
: "bigger"
if와 달리 조건문이 참일 경우에 만 실행한다.
*** case
#+BEGIN_SRC elisp
(setq day 4)
(case day
  (1 (prin1 "Monday"))
  (2 (prin1 "Tuesday"))
  (3 (prin1 "Wednseday")) 
  (4 (prin1 "Friday"))
  (5 (prin1 "Saturday"))
  (6 (prin1 "Sunday")))
#+END_SRC

#+RESULTS:
: Friday
** 반복문 
*** loop
#+BEGIN_SRC elisp
(setq a 1)
(loop
  (setq a (+ a 1))
  (when (>= a 10) (return a)))
#+END_SRC

#+RESULTS:
: 10
*** loop for
#+BEGIN_SRC elisp :results output
(loop for x in `(a b c)
  do (prin1 x))
#+END_SRC

#+RESULTS:
: abc
#+BEGIN_SRC elisp :results output
(loop for x from 10 to 20
  do (princ (format "%d " x)))
#+END_SRC

#+RESULTS:
: 10 11 12 13 14 15 16 17 18 19 20 
#+BEGIN_SRC elisp :results output
(loop for x from 1 to 20
  if(evenp x) do (princ (format "%d " x)))
#+END_SRC

#+RESULTS:
: 2 4 6 8 10 12 14 16 18 20 
*** do 
#+BEGIN_SRC elisp :results output
(do 
  ((x 0 (+ 2 x)) (y 20 (- y 2)))
  ((= x y)(- x y))
  (princ (format "x=%d y=%d\n" x y)))
#+END_SRC

#+RESULTS:
: x=0 y=20
: x=2 y=18
: x=4 y=16
: x=6 y=14
: x=8 y=12
do는 얼핏 보면 생소한 반복문 처럼 보이지만 do while문과 흡사하다.
do의 두번째 즉 (do (이 부분) 의 값은 변수와 변수의 변화를 정의하는 부분이다.
(x 0 (+ 2 x))는 즉 x에 초기값 0을 할당하고 이후에는 2씩 증가함을 뜻한다.
((= x y) (- x y)) 이 부분은 반복시에 값을 검증하여 조건에 부합하면 반복이 종료된다.
*** dotimes
#+BEGIN_SRC elisp :results output
(dotimes (n 11)
(princ n) (princ (format "-%d " (* n n))))
#+END_SRC

#+RESULTS:
: 0-0 1-1 2-4 3-9 4-16 5-25 6-36 7-49 8-64 9-81 10-100 
*** dolist 
#+BEGIN_SRC elisp :results output
(dolist (n `(1 2 3 4 5 6 7 8 9))
  (princ (format "%d " (* n n))))
#+END_SRC

#+RESULTS:
: 1 4 9 16 25 36 49 64 81 

*우아한 블럭 종결 문제*
javascript 처럼 콜백 체인 형식의 언어 페러다임에서 반환값을 예측하는 것은 매우 힘든일이다.
#+BEGIN_SRC elisp :results output
(defun block-test (flag)
(block first
  (prin1 (block inner-first
    (if flag 
      (return-from first `outer)
      (return-from inner-first `inner)
    )
  ))
t))
(block-test t)
(block-test nil)
#+END_SRC

#+RESULTS:
: inner
** 함수  
#+BEGIN_SRC elisp
(defun averageNum (n1 n2 n3)
  (/ (+ n1 n2 n3) 3))
(averageNum 3 3 3)
#+END_SRC

#+RESULTS:
: 3
** 숫자 체계
lisp은 수학 체계를 잘 구현한 언어이다.

#+BEGIN_SRC dot :file images/number-system.svg :exports results
digraph NumberSystem {
Number -> {Real Complex};
Real -> {Rational Float};
Rational -> {Integer Ratio};
Integer -> {Bignum Fixnum};
Float -> {ShortFloat SingleFloat DoubleFloat LongFlot};
}
#+END_SRC

#+RESULTS:
[[file:images/number-system.svg]]

*** 수의 범주별 상세
| Data type | Description                                                       |
|-----------+-------------------------------------------------------------------|
| fixnum    | 대개 -215부터 215-1까지의 정수 표현을 나타낸다.(머신 별로 상이함) |
| bignum    | 큰 수를 표현하며 메모리의 제한 영역까지 이른다.                   |
| ratio     | 두 수를 통해 퍼센테이지 비율을 표기한다.                          |
| float     | 부동 소수점 표현                                                  |
| complex   | 복소수 표현                                                       |

#+BEGIN_SRC  elisp :results output
(prin1 (integerp (/ 1 2)))
(print (integerp (+ (/ 1 2) (/ 3 4))))
(prin1 (floatp 0.333))
(print (integerp 0.333))
(prin1 (integerp (/ 1 3)))
(print (calc-eval "1+2i"))
#+END_SRC

#+RESULTS:
: t
: t
: t
: nil
: t
: "2 i + 1"
위의 수체계는 common lisp에서는 통용되나 emacs lisp에서는 통용되지 않는다. 결정적으로 complex를 지원하지 않는다.
이는 emacs lisp이 문서 편집에 특화된 언어이기 때문이다.
* E-Lisp
common lisp은 일반적인 프로그래밍 언어를 목표로 하기 때문에 elisp과는 상이한 점이 많다.
앞서 수의 체계에서도 알 수 있듯이 목표로하는 이점이 다르기 때문이다. 이제 부터는 elisp을 이용한 텍스트 편집에 중점을 두려한다.
** Text Editing
*** 커서의 위치
#+BEGIN_SRC elisp :exports none
;; 현재 커서의 위치값 왼쪽부터 시작된다.
(point)

;; 선택된 영역의 커서 위치값
(region-beginning)
(region-end)

;; 현재 줄의 커서 위치값 
(line-beginning-position)
(line-end-position)

;; 현재 버퍼의 최소/최대 위치값
(point-max)
(point-min)
#+END_SRC
*** 커서 이동 및 검색 
#+BEGIN_SRC elisp :exports none
(goto-char 39)

(forward-char 4)
(backward-char 4)

(search-forward "some")
(search-forward "some")

;; 정규표현식을 이용한 검색
(re-search-forward "[0-9]")
(re-search-backward "[0-9")

(skip-chars-forward "a-z")
(skip-chars-backward "a-z")
#+END_SRC
*** 문자 삭제/삽입/변환 
#+BEGIN_SRC elisp :exports none
(delete-char 9)
(delete-region 3 10)

(insert "hello")

(setq x (buffer-substring 71 300))

(capitalize-region 71 300)
#+END_SRC
*** 문자열
#+BEGIN_SRC elisp :epxorts none
(length "abc")

;; a 이후 부터 e까지의 문자열 값
(substring "abdefg" 1 4 )

;; 십진수 수들을 X로 변환한다.
(replace-regexp-in-string "[0-9]" "X" "abc123")
#+END_SRC
*** 파일 
#+BEGIN_SRC elisp :exports none
;; 현재 버퍼에 해당 파일을 연다.
(find-file "~/.spacemacs")

;; 현재 파일을 저장한다.
(write-file path)

;; 현재 위치에 해당 파일의 내용을 입력한다. 
;; spacemacs 에서는 insert-file
(insert-file-contents path)

;; 현재 버퍼에 내용을 해당 파일에 추가한다.
(append-to-file start-pos end-pos path)

(rename-file file-name new-name)
(copy-file old-name new-name)
(delete-file file-name)

(file-name-directory full-path)
(file-name-nondirectory full-path)
(file-name-extenstion file-name)
(file-name-sans-extension file-name)
#+END_SRC
*** 버퍼 
#+BEGIN_SRC elisp :exports none
(buffer-name)
(buffer-file-name)

;; xyz 버퍼로 현재 버퍼를 변경한다.
(set-buffer "xyz")

(save-buffer)
(kill-buffer "xyz")
(with-current-buffer "xyz"
;; 해당 버퍼를 현재 작업 버퍼로 설정한다. 아래 부분에서 버퍼 편집에 관련된 작업들을 삽입한다.
)
#+END_SRC
** 좀 더 익혀야할 것들
*** Preserve Cursor Position
텍스트 편집에 있어 명령어 간에 커서 간섭으로 인해 커서가 예상하지 못한 곳으로 이동하는 것을 방지하기 위해
커서의 위치를 보존하는 함수를 사용한다.
#+BEGIN_SRC elisp :exports none
;; point, mark, buffer을 고정한다.
(save-excursion
;; 커서의 고정후 행위를 지정하는 영역.
)

;; 사용자가 지정한 narrow 영역을 보존한다. narrow란 너무 긴 문서에서 특정 영역만을 선택하고 다른 영역을 제외함을 뜻한다.
(save-restriction
  (narrow-to-region pos1 pos2)
  ;; 행위 영역
)
#+END_SRC
*** Grab Text from Buffer to String 
#+BEGIN_SRC elisp
;; 이맥스 텍스트들은 특정 프로퍼티를 내포하고 있어서 문자를 추출할 때 프로퍼티를 제거하는 작업이 필요하다.
(buffer-substring-no-properties 99 200)

;; 현재 커서의 단어를 반환
(thing-at-point `word)

;; hyphen(-)과 underscore(_)를 포함하는 단어를 반환한다.
(thing-at-point `symbol)

;; 현재 커서의 라인을 문자열로 반환
(thing-at-point `line)

;; 단어의 시작과 끝의 위치값을 반환 
(bounds-of-thing-at-point `word)
#+END_SRC
*** Strings 
#+BEGIN_SRC elisp :exports none
;; 부분 문자열 추출
(substring "abc" 1 2)

;; 문자열 합치기
(concat "some" "thing")

;; 패턴 검증, 일치하는 문자의 갯수를 반환한다.
(setq x "abc123")
(string-match "\\(1\\)\\(2\\)" x)

;; 정규식 패턴에 일치한 문자를 반환한다. 첫번째 매개변수는 패턴의 인덱스다
;; 아래 예제에서 2는 (2) 정규식 패턴에 일치한 문자를 캡쳐하게된다.
(match-string 2 x)

;; 정규식에 일치한 문자를 다른 문자로 변환한다.
(replace-regexp-in-string "1" "2" x)

;; 문자열을 delimiter를 통해 분리하고 리스트로 반환한다.
(listp (split-string "xy_007_cat" "_"))

(string-to-number "3")
(number-to-string 3)
#+END_SRC

